#!/bin/bash
#
# Copyright (C) - 2020 EfficiOS, inc
#
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; version 2.1 of the License.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA

# Test the `lttng list-trigger` command line interface.

CURDIR="$(dirname "$0")"
TESTDIR="$CURDIR/../../.."

# shellcheck source=../../../utils/utils.sh
source "$TESTDIR/utils/utils.sh"

NUM_TESTS=106

FULL_LTTNG_BIN="${TESTDIR}/../src/bin/lttng/${LTTNG_BIN}"

tmp_stdout=$(mktemp --tmpdir -t test_list_triggers_cli_stdout.XXXXXX)
tmp_stderr=$(mktemp --tmpdir -t test_list_triggers_cli_stderr.XXXXXX)
tmp_expected_stdout=$(mktemp --tmpdir -t test_list_triggers_cli_expected_stdout.XXXXXX)
uprobe_elf_binary=$(realpath "${TESTDIR}/utils/testapp/userspace-probe-elf-binary/.libs/userspace-probe-elf-binary")
uprobe_sdt_binary=$(realpath "${TESTDIR}/utils/testapp/userspace-probe-sdt-binary/.libs/userspace-probe-sdt-binary")
register_some_triggers_bin=$(realpath "${CURDIR}/utils/register-some-triggers")

uid=$(id --user)
gid=$(id --group)

if [ "$uid" == "0" ]; then
	ist_root=1
	ls "$uprobe_sdt_binary" >/dev/null 2>&1
	if test $? == 0; then
		hast_sdt_binary=1
	else
		hast_sdt_binary=0
	fi
else
	ist_root=0
	hast_sdt_binary=0
fi


test_top_level_options ()
{
	diag "Listing top level options"

	lttng_add_trigger_ok "hello" --condition event-rule-matches --domain=user --name=test-name --action notify

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: hello
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: test-name (type: tracepoint, domain: ust)
	  actions:
	    notify
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "top level options" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "hello"
}

test_event_rule_matches_tracepoint ()
{
	diag "Listing event-rule-matches tracepoint"

	lttng_add_trigger_ok "C" --condition event-rule-matches --domain=user --action notify
	lttng_add_trigger_ok "A" --condition event-rule-matches --name=aaa --domain=user --filter 'p == 2' --action notify
	lttng_add_trigger_ok "D" --condition event-rule-matches --name='hello*' --domain=user -x hello2 --exclude-name  hello3 -x hello4 --action notify
	lttng_add_trigger_ok "B" --condition event-rule-matches --domain=user --name=gerboise --log-level INFO.. --action notify
	lttng_add_trigger_ok "E" --condition event-rule-matches --domain=user --name=lemming --log-level WARNING --action notify
	lttng_add_trigger_ok "J" --condition event-rule-matches --domain=user --name=lemming --log-level .. --action notify
	lttng_add_trigger_ok "F" --condition event-rule-matches --domain=user --name=capture-payload-field --capture a --action notify
	lttng_add_trigger_ok "G" --condition event-rule-matches --domain=user --name=capture-array --capture 'a[2]' --capture '$ctx.tourlou[18]' --action notify
	lttng_add_trigger_ok "H" --condition event-rule-matches --domain=user --name=capture-chan-ctx --capture '$ctx.vpid' --action notify
	lttng_add_trigger_ok "I" --condition event-rule-matches --domain=user --name=capture-app-ctx --capture '$app.iga:active_clients' --action notify

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: A
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: aaa (type: tracepoint, domain: ust, filter: p == 2)
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: B
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: gerboise (type: tracepoint, domain: ust, log level at least INFO)
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: C
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: * (type: tracepoint, domain: ust)
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: D
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: hello* (type: tracepoint, domain: ust, exclusions: hello2,hello3,hello4)
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: E
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: lemming (type: tracepoint, domain: ust, log level is WARNING)
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: F
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: capture-payload-field (type: tracepoint, domain: ust)
	    captures:
	      - a
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: G
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: capture-array (type: tracepoint, domain: ust)
	    captures:
	      - a[2]
	      - \$ctx.tourlou[18]
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: H
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: capture-chan-ctx (type: tracepoint, domain: ust)
	    captures:
	      - \$ctx.vpid
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: I
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: capture-app-ctx (type: tracepoint, domain: ust)
	    captures:
	      - \$app.iga:active_clients
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: J
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: lemming (type: tracepoint, domain: ust)
	  actions:
	    notify
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "event-rule-matches, tracepoint event rule" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "A"
	lttng_remove_trigger_ok "B"
	lttng_remove_trigger_ok "C"
	lttng_remove_trigger_ok "D"
	lttng_remove_trigger_ok "E"
	lttng_remove_trigger_ok "F"
	lttng_remove_trigger_ok "G"
	lttng_remove_trigger_ok "H"
	lttng_remove_trigger_ok "I"
	lttng_remove_trigger_ok "J"
}

test_event_rule_matches_probe ()
{
	local channel_enable_addr
	local channel_disable_addr

	diag "Listing event-rule-matches kernel probe"

	channel_enable_addr=$(grep 'lttng_event_container_enable' /proc/kallsyms | cut -f 1 -d ' ')
	channel_disable_addr=$(grep 'lttng_event_container_disable' /proc/kallsyms | cut -f 1 -d ' ')

	# We need to find a valid offset.
	base_symbol=""
	offset=0
	if [[ 0x$channel_enable_addr -lt 0x$channel_disable_addr ]]; then
		base_symbol="lttng_event_container_enable"
		offset=$(( 0x$channel_disable_addr - 0x$channel_enable_addr ))
	else
		base_symbol="lttng_event_container_disable"
		offset=$(( 0x$channel_enable_addr - 0x$channel_disable_addr ))
	fi

	offset_hex="0x$(printf '%x' $offset)"

	lttng_add_trigger_ok "T0" --condition event-rule-matches --domain=kernel --type=kprobe --location=lttng_channel_enable --event-name=my_channel_enable --action notify
	lttng_add_trigger_ok "T1" --condition event-rule-matches --domain=kernel --type=kprobe --location="${base_symbol}+${offset_hex}" --event-name=my_channel_enable --action notify
	lttng_add_trigger_ok "T2" --condition event-rule-matches --domain=kernel --type=kprobe --location="0x${channel_enable_addr}" --event-name=my_channel_enable --action notify

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: T0
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: my_channel_enable (type: probe, location: lttng_channel_enable)
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: T1
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: my_channel_enable (type: probe, location: ${base_symbol}+${offset_hex})
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: T2
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: my_channel_enable (type: probe, location: 0x${channel_enable_addr})
	  actions:
	    notify
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "event-rule-matches, probe event rule" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "T0"
	lttng_remove_trigger_ok "T1"
	lttng_remove_trigger_ok "T2"
}

test_event_rule_matches_userspace_probe_elf ()
{
	local elf_function_name="test_function"

	diag "Listing event-rule-matches userspace-probe elf"

	lttng_add_trigger_ok "T0" --condition event-rule-matches --domain=kernel --type=uprobe --location=${uprobe_elf_binary}:test_function --event-name=ma-probe-elf --action notify

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: T0
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: ma-probe-elf (type: userspace probe, location type: ELF, location: ${uprobe_elf_binary}:${elf_function_name})
	  actions:
	    notify
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "event-rule-matches, userspace-probe event rule" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "T0"
}

test_event_rule_matches_userspace_probe_sdt ()
{
	local sdt_provider_name="foobar"
	local sdt_probe_name="tp1"

	diag "Listing event-rule-matches userspace-probe sdt"

	lttng_add_trigger_ok "T0" --condition event-rule-matches --domain=kernel --type=uprobe --location=sdt:${uprobe_sdt_binary}:${sdt_provider_name}:${sdt_probe_name} --event-name=ma-probe-sdt --action notify

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: T0
	  owner uid: 0
	  condition: event rule matches
	    rule: ma-probe-sdt (type: userspace probe, location type: SDT, location: ${uprobe_sdt_binary}:${sdt_provider_name}:${sdt_probe_name})
	  actions:
	    notify
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "event-rule-matches, userspace-probe event rule SDT" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "T0"
}

test_event_rule_matches_syscall ()
{
	diag "Listing event-rule-matches syscall"

	lttng_add_trigger_ok "T0" --condition event-rule-matches --domain=kernel --type=syscall --name=open --action notify
	lttng_add_trigger_ok "T1" --condition event-rule-matches --domain=kernel --type=syscall:entry --name=open --action notify
	lttng_add_trigger_ok "T2" --condition event-rule-matches --domain=kernel --type=syscall:exit --name=open --action notify
	lttng_add_trigger_ok "T3" --condition event-rule-matches --domain=kernel --type=syscall:entry+exit --name=open --action notify
	lttng_add_trigger_ok "T4" --condition event-rule-matches --domain=kernel --type=syscall --name=ptrace --filter 'a > 2' --action notify

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: T0
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: open (type: syscall:entry+exit)
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: T1
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: open (type: syscall:entry)
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: T2
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: open (type: syscall:exit)
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: T3
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: open (type: syscall:entry+exit)
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: T4
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: ptrace (type: syscall:entry+exit, filter: a > 2)
	  actions:
	    notify
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "event-rule-matches, syscall event rule" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "T0"
	lttng_remove_trigger_ok "T1"
	lttng_remove_trigger_ok "T2"
	lttng_remove_trigger_ok "T3"
	lttng_remove_trigger_ok "T4"
}

test_session_consumed_size_condition ()
{
	${register_some_triggers_bin} test_session_consumed_size_condition

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: trigger-with-session-consumed-size-condition
	  owner uid: ${uid}
	  condition: session consumed size
	    session name: the-session-name
	    threshold: 1234 bytes
	  actions:
	    notify
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "session consumed size condition" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "trigger-with-session-consumed-size-condition"
}

test_buffer_usage_conditions ()
{
	${register_some_triggers_bin} test_buffer_usage_conditions

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: trigger-with-buffer-usage-high-bytes-condition
	  owner uid: ${uid}
	  condition: buffer usage high
	    session name: the-session-name
	    channel name: the-channel-name
	    domain: ust
	    threshold (bytes): 1234
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: trigger-with-buffer-usage-high-ratio-condition
	  owner uid: ${uid}
	  condition: buffer usage high
	    session name: the-session-name
	    channel name: the-channel-name
	    domain: ust
	    threshold (ratio): 0.25
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: trigger-with-buffer-usage-low-bytes-condition
	  owner uid: ${uid}
	  condition: buffer usage low
	    session name: the-session-name
	    channel name: the-channel-name
	    domain: ust
	    threshold (bytes): 2345
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: trigger-with-buffer-usage-low-ratio-condition
	  owner uid: ${uid}
	  condition: buffer usage low
	    session name: the-session-name
	    channel name: the-channel-name
	    domain: ust
	    threshold (ratio): 0.40
	  actions:
	    notify
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "buffer usage condition" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "trigger-with-buffer-usage-high-bytes-condition"
	lttng_remove_trigger_ok "trigger-with-buffer-usage-high-ratio-condition"
	lttng_remove_trigger_ok "trigger-with-buffer-usage-low-bytes-condition"
	lttng_remove_trigger_ok "trigger-with-buffer-usage-low-ratio-condition"
}

test_session_rotation_conditions ()
{
	${register_some_triggers_bin} test_session_rotation_conditions

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: trigger-with-session-rotation-completed-condition
	  owner uid: ${uid}
	  condition: session rotation completed
	    session name: the-session-name
	  actions:
	    notify
	      errors: none
	  errors: none
	- name: trigger-with-session-rotation-ongoing-condition
	  owner uid: ${uid}
	  condition: session rotation ongoing
	    session name: the-session-name
	  actions:
	    notify
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "session rotation conditions" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "trigger-with-session-rotation-completed-condition"
	lttng_remove_trigger_ok "trigger-with-session-rotation-ongoing-condition"
}

test_snapshot_action ()
{
	diag "Listing snapshot actions"

	lttng_add_trigger_ok "T0" --condition event-rule-matches --domain=user --name=some-event --action snapshot-session ze-session
	lttng_add_trigger_ok "T1" --condition event-rule-matches --domain=user --name=some-event --action snapshot-session ze-session --path /some/path
	lttng_add_trigger_ok "T2" --condition event-rule-matches --domain=user --name=some-event --action snapshot-session ze-session --url file:///some/other/path
	lttng_add_trigger_ok "T3" --condition event-rule-matches --domain=user --name=some-event --action snapshot-session ze-session --url net://1.2.3.4
	lttng_add_trigger_ok "T4" --condition event-rule-matches --domain=user --name=some-event --action snapshot-session ze-session --url net://1.2.3.4:1234:1235
	lttng_add_trigger_ok "T5" --condition event-rule-matches --domain=user --name=some-event --action snapshot-session ze-session --ctrl-url=tcp://1.2.3.4:1111 --data-url=tcp://1.2.3.4:1112
	lttng_add_trigger_ok "T6" --condition event-rule-matches --domain=user --name=some-event --action snapshot-session ze-session --path /some/path --max-size=1234
	lttng_add_trigger_ok "T7" --condition event-rule-matches --domain=user --name=some-event --action snapshot-session ze-session --path /some/path --name=meh
	lttng_add_trigger_ok "T8" --condition event-rule-matches --domain=user --name=some-event --action snapshot-session ze-session --rate-policy=every:10
	lttng_add_trigger_ok "T9" --condition event-rule-matches --domain=user --name=some-event --action snapshot-session ze-session --rate-policy=once-after:10

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: T0
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    snapshot session \`ze-session\`
	      errors: none
	  errors: none
	- name: T1
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    snapshot session \`ze-session\`, path: /some/path
	      errors: none
	  errors: none
	- name: T2
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    snapshot session \`ze-session\`, path: /some/other/path
	      errors: none
	  errors: none
	- name: T3
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    snapshot session \`ze-session\`, url: net://1.2.3.4
	      errors: none
	  errors: none
	- name: T4
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    snapshot session \`ze-session\`, url: net://1.2.3.4:1234:1235
	      errors: none
	  errors: none
	- name: T5
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    snapshot session \`ze-session\`, control url: tcp://1.2.3.4:1111, data url: tcp://1.2.3.4:1112
	      errors: none
	  errors: none
	- name: T6
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    snapshot session \`ze-session\`, path: /some/path, max size: 1234
	      errors: none
	  errors: none
	- name: T7
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    snapshot session \`ze-session\`, path: /some/path, name: meh
	      errors: none
	  errors: none
	- name: T8
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    snapshot session \`ze-session\`, rate policy: every 10 occurrences
	      errors: none
	  errors: none
	- name: T9
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    snapshot session \`ze-session\`, rate policy: once after 10 occurrences
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "snapshot action" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "T0"
	lttng_remove_trigger_ok "T1"
	lttng_remove_trigger_ok "T2"
	lttng_remove_trigger_ok "T3"
	lttng_remove_trigger_ok "T4"
	lttng_remove_trigger_ok "T5"
	lttng_remove_trigger_ok "T6"
	lttng_remove_trigger_ok "T7"
	lttng_remove_trigger_ok "T8"
	lttng_remove_trigger_ok "T9"
}

test_notify_action ()
{
	lttng_add_trigger_ok "T0" --condition event-rule-matches --domain=user --name=some-event --action notify --rate-policy=once-after:5
	lttng_add_trigger_ok "T1" --condition event-rule-matches --domain=user --name=some-event --action notify --rate-policy=every:10

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: T0
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    notify, rate policy: once after 5 occurrences
	      errors: none
	  errors: none
	- name: T1
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: some-event (type: tracepoint, domain: ust)
	  actions:
	    notify, rate policy: every 10 occurrences
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "notify action" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "T0"
	lttng_remove_trigger_ok "T1"
}

test_on_event_kernel_incr_value ()
{
	local session="session_doesnt_need_to_exist"
	local map="map_doesnt_need_to_exist"
	# shellcheck disable=SC2119
	start_lttng_sessiond_notap

	lttng_add_trigger_ok "T0" --condition on-event -k some-event --action incr-value -s $session -m $map --key string
	lttng_add_trigger_ok "T1" --condition on-event -k some-event2 --action incr-value -s $session -m $map --key prefix_$\{EVENT_NAME\}

	cat > "${tmp_expected_stdout}" <<- EOF
	- id: T0
	  user id: ${uid}
	  condition: event rule hit
	    rule: some-event (type: tracepoint, domain: kernel)
	    tracer notifications discarded: 0
	  actions:
	    increment value:
	       session: \`${session}\`
	       map: \`${map}\`
	       key: \`string\`
	- id: T1
	  user id: ${uid}
	  condition: event rule hit
	    rule: some-event2 (type: tracepoint, domain: kernel)
	    tracer notifications discarded: 0
	  actions:
	    increment value:
	       session: \`${session}\`
	       map: \`${map}\`
	       key: \`prefix_\${EVENT_NAME}\`
	EOF

	list_triggers "on-event kernel incr-value" "${tmp_expected_stdout}"

	stop_lttng_sessiond_notap
}

test_on_event_ust_incr_value ()
{
	local session="session_doesnt_need_to_exist"
	local map="map_doesnt_need_to_exist"
	# shellcheck disable=SC2119
	start_lttng_sessiond_notap

	lttng_add_trigger_ok "T0" --condition on-event -u some-event --action incr-value -s $session -m $map --key string
	lttng_add_trigger_ok "T1" --condition on-event -u some-event2 --action incr-value -s $session -m $map --key prefix_$\{EVENT_NAME\}

	cat > "${tmp_expected_stdout}" <<- EOF
	- id: T0
	  user id: ${uid}
	  condition: event rule hit
	    rule: some-event (type: tracepoint, domain: ust)
	    tracer notifications discarded: 0
	  actions:
	    increment value:
	       session: \`${session}\`
	       map: \`${map}\`
	       key: \`string\`
	- id: T1
	  user id: ${uid}
	  condition: event rule hit
	    rule: some-event2 (type: tracepoint, domain: ust)
	    tracer notifications discarded: 0
	  actions:
	    increment value:
	       session: \`${session}\`
	       map: \`${map}\`
	       key: \`prefix_\${EVENT_NAME}\`
	EOF

	list_triggers "on-event UST incr-value" "${tmp_expected_stdout}"

	stop_lttng_sessiond_notap
}

plan_tests $NUM_TESTS

# shellcheck disable=SC2119
start_lttng_sessiond_notap

test_top_level_options
test_event_rule_matches_tracepoint
skip $ist_root "non-root user: skipping kprobe tests" 9 || test_event_rule_matches_probe
skip $ist_root "non-root user: skipping uprobe tests" 5 || test_event_rule_matches_userspace_probe_elf
skip $(($ist_root && $hast_sdt_binary)) "skipping userspace probe SDT tests" 5 || test_event_rule_matches_userspace_probe_sdt
skip $ist_root "non-root user: skipping syscall tests" 13 || test_event_rule_matches_syscall
test_session_consumed_size_condition
test_buffer_usage_conditions
test_session_rotation_conditions
test_snapshot_action
test_notify_action
skip $ist_root "non-root user: skipping incr-value tests" 5 || test_on_event_kernel_incr_value
test_on_event_ust_incr_value

stop_lttng_sessiond_notap

# Cleanup
rm -f "${tmp_stdout}"
rm -f "${tmp_stderr}"
rm -f "${tmp_expected_stdout}"
